{
  lib,
  pkgs,
  config,
  ...
}: let
  cfg = config.services.owntracks-frontend;
  inherit (lib) mkIf mkOption mkEnableOption types;
in {
  options.services.owntracks-frontend = {
    enable = mkEnableOption "OwnTracks Frontend (static SPA)";
    package = mkOption {
      type = types.package;
      description = "OwnTracks Frontend package providing dist assets";
      default = pkgs.callPackage ../../pkgs/owntracks-frontend {nodejs = pkgs.nodejs_20;};
    };
    listenAddress = mkOption {
      type = types.str;
      default = "127.0.0.1";
    };
    port = mkOption {
      type = types.port;
      default = 10032;
    };
    dataDir = mkOption {
      type = types.path;
      default = "/var/lib/owntracks-frontend";
    };

    # Where your Recorder API is reachable by browsers (the Frontend).
    # Example: "https://owntracks.matmoa.eu" (your Caddy reverse-proxies recorder:8083 there)
    apiBaseUrl = mkOption {
      type = types.str;
      example = "https://owntracks.matmoa.eu";
      description = "Base URL of the OwnTracks Recorder HTTP API.";
    };

    # Set if you serve the SPA under a subpath (often not needed). E.g. "/frontend".
    routerBasePath = mkOption {
      type = types.str;
      default = "/";
      description = "Router base path used by the SPA (for subpath hosting).";
    };
  };

  config = mkIf cfg.enable {
    users.groups.owntracks-frontend = {};
    users.users.owntracks-frontend = {
      isSystemUser = true;
      group = "owntracks-frontend";
    };

    systemd.tmpfiles.rules = [
      "d ${cfg.dataDir} 0750 owntracks-frontend owntracks-frontend -"
      "d ${cfg.dataDir}/site 0750 owntracks-frontend owntracks-frontend -"
      "d ${cfg.dataDir}/site/config 0750 owntracks-frontend owntracks-frontend -"
    ];

    # Copy immutable dist assets into the state dir (so we can drop/replace config.js at runtime)
    system.activationScripts.owntracks-frontend = lib.stringAfter ["users" "groups"] ''
      rm -rf ${cfg.dataDir}/site
      mkdir -p ${cfg.dataDir}/site
      cp -R --no-preserve=mode,ownership ${cfg.package}/share/owntracks-frontend/. ${cfg.dataDir}/site/
      chown -R owntracks-frontend:owntracks-frontend ${cfg.dataDir}
    '';

    # Generate runtime config.js that the SPA loads (public/config/config.js â†’ dist/config/config.js) :contentReference[oaicite:3]{index=3}
    environment.etc."owntracks-frontend/config.js".text = ''
      // Generated by NixOS module
      window.owntracks = window.owntracks || {};
      window.owntracks.config = {
        api: { baseUrl: "${cfg.apiBaseUrl}" },
        router: { basePath: "${cfg.routerBasePath}" },
      };
    '';

    systemd.services.owntracks-frontend = {
      description = "OwnTracks Frontend (static SPA via miniserve)";
      after = ["network-online.target"];
      wants = ["network-online.target"];
      wantedBy = ["multi-user.target"];
      serviceConfig = {
        User = "owntracks-frontend";
        Group = "owntracks-frontend";
        WorkingDirectory = cfg.dataDir;

        # Ensure our runtime config is in place each (re)start
        ExecStartPre = [
          "${pkgs.coreutils}/bin/install -m 0644 -o owntracks-frontend -g owntracks-frontend /etc/owntracks-frontend/config.js ${cfg.dataDir}/site/config/config.js"
        ];

        # Serve SPA; --spa makes unknown routes fall back to index.html :contentReference[oaicite:4]{index=4}
        ExecStart = ''
          ${pkgs.miniserve}/bin/miniserve \
            --interfaces ${cfg.listenAddress} \
            --port ${toString cfg.port} \
            --index index.html \
            --spa \
            ${cfg.dataDir}/site
        '';

        Restart = "always";
        RestartSec = 2;

        # Hardening
        NoNewPrivileges = true;
        PrivateTmp = true;
        ProtectSystem = "strict";
        ProtectHome = true;
        ReadWritePaths = ["${cfg.dataDir}"];
        AmbientCapabilities = "";
        CapabilityBoundingSet = "";
        LockPersonality = true;
        MemoryDenyWriteExecute = true;
        RestrictSUIDSGID = true;
        RestrictRealtime = true;
        RestrictNamespaces = true;
        SystemCallFilter = ["@system-service"];
      };
    };
  };
}
